<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spectral Overlay Visualizer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      body {
        min-height: 100vh;
        background-color: #e8eef5;
        padding: 2rem;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      }
      
      .container {
        background: white;
        border: 2px solid #d1d5db;
        border-radius: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 95vw;
        margin: 0 auto;
        padding: 2rem;
        position: relative;
      }
      
      .download-btn {
        position: absolute;
        top: 2rem;
        right: 2rem;
        border: 2px solid #d1d5db;
        border-radius: 0.5rem;
        padding: 0.5rem 1rem;
        background: white;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        color: #374151;
      }
      
      .download-btn:hover {
        background: #f9fafb;
      }
      
      .download-btn svg {
        width: 1.25rem;
        height: 1.25rem;
      }
      
      h1 {
        font-size: 1.875rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        color: #1f2937;
      }
      
      .stage-section {
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        background: white;
        border: 2px solid #d1d5db;
        border-radius: 0.75rem;
      }
      
      .stage-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #1f2937;
      }
      
      .upload-area {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
      }
      
      .upload-btn {
        background: #2b7de9;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: all 0.2s;
        border: none;
        display: inline-block;
      }
      
      .upload-btn:hover {
        background: #1a6dd6;
      }
      
      .file-list {
        list-style: none;
        background: #f9fafb;
        border: 2px solid #e5e7eb;
        border-radius: 0.5rem;
        padding: 0.75rem;
        width: 20rem;
        min-height: 60px;
        max-height: 100px;
        overflow-y: auto;
        font-size: 0.875rem;
        color: #374151;
      }
      
      .file-list li {
        padding: 0.25rem 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .file-list .empty {
        text-align: center;
        font-style: italic;
        color: #9ca3af;
        display: block;
      }
      
      .delete-file-btn {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 0.25rem;
        padding: 0.125rem 0.5rem;
        font-size: 0.75rem;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .delete-file-btn:hover {
        background: #dc2626;
      }
      
      .file-count {
        font-size: 0.875rem;
        font-weight: 600;
        color: #6b7280;
      }
      
      .action-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
      }
      
      .btn-run {
        background: #2b7de9;
        color: white;
        padding: 0.75rem 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: 600;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .btn-run:hover {
        background: #1a6dd6;
      }
      
      .btn-clear {
        background: #6b7280;
        color: white;
        padding: 0.75rem 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: 600;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .btn-clear:hover {
        background: #4b5563;
      }
      
      .results-container {
        display: none;
      }
      
      .results-container.visible {
        display: block;
      }
      
      .results-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
        color: #1f2937;
      }
      
      .charts-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
      }
      
      @media (min-width: 1024px) {
        .charts-grid {
          grid-template-columns: repeat(2, 1fr);
        }
      }
      
      .chart-card {
        background: white;
        border: 2px solid #d1d5db;
        border-radius: 0.75rem;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }
      
      .chart-card h3 {
        font-size: 1rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 0.5rem;
        color: #1f2937;
      }
      
      .chart-card canvas {
        height: 200px !important;
      }
      
      input[type="file"] {
        display: none;
      }
    </style>
  </head>

  <body>
    <div class="container">
      
      <button id="downloadBtn" class="download-btn">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
          stroke-width="2" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round"
            d="M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4" />
        </svg>
        <span>Download</span>
      </button>

      <h1>Spectral Overlay Visualizer</h1>

      <div class="stage-section">
        <h2 class="stage-title">Upload Sample Spectra</h2>
        
        <div class="upload-area">
          <label for="fileInput" class="upload-btn">
            üìÅ Upload Sample Spectra (Max 6 files)
          </label>
          <input id="fileInput" type="file" accept=".xlsx,.xls" multiple />

          <ul id="fileList" class="file-list">
            <li class="empty">No files uploaded</li>
          </ul>

          <div id="fileCount" class="file-count">
            0 / 6 files uploaded
          </div>
        </div>
      </div>

      <div class="action-buttons">
        <button id="runBtn" class="btn-run">
          ‚ñ∂Ô∏è Run Analysis
        </button>

        <button id="clearBtn" class="btn-clear">
          üóëÔ∏è Clear All
        </button>
      </div>

      <div id="resultsContainer" class="results-container">
        <h2 class="results-title">Analysis Results</h2>
        <div id="chartsContainer" class="charts-grid"></div>
      </div>
    </div>

    <script>
      const fileInput = document.getElementById("fileInput");
      const fileList = document.getElementById("fileList");
      const fileCount = document.getElementById("fileCount");
      const runBtn = document.getElementById("runBtn");
      const clearBtn = document.getElementById("clearBtn");
      const downloadBtn = document.getElementById("downloadBtn");
      const resultsContainer = document.getElementById("resultsContainer");
      const chartsContainer = document.getElementById("chartsContainer");

      let spectraData = [];
      let chartInstances = [];
      const MAX_FILES = 6;

      fileInput.addEventListener("change", async (e) => {
        const files = Array.from(e.target.files);
        
        if (spectraData.length + files.length > MAX_FILES) {
          alert(`You can only upload up to ${MAX_FILES} files. Currently have ${spectraData.length} file(s).`);
          fileInput.value = "";
          return;
        }
        
        for (const file of files) {
          const fileName = file.name;
          if (spectraData.some(s => s.originalName === fileName)) {
            alert(`File "${fileName}" has already been uploaded.`);
            continue;
          }
          
          try {
            const buffer = await file.arrayBuffer();
            const workbook = XLSX.read(buffer, { type: "array" });
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

            const points = rows
              .slice(1)
              .map((r) => ({ x: parseFloat(r[0]), y: parseFloat(r[1]) }))
              .filter((p) => !isNaN(p.x) && !isNaN(p.y));

            if (points.length > 0) {
              spectraData.push({
                name: file.name.replace(/\.[^/.]+$/, ""),
                originalName: fileName,
                plot: points,
              });
            }
          } catch (err) {
            alert(`Error reading file ${fileName}: ${err.message}`);
          }
        }
        updateFileDisplay();
        fileInput.value = "";
      });

      function deleteFile(index) {
        spectraData.splice(index, 1);
        updateFileDisplay();
      }

      function updateFileDisplay() {
        fileList.innerHTML = "";
        if (spectraData.length === 0) {
          fileList.innerHTML = '<li class="empty">No files uploaded</li>';
          fileCount.textContent = `0 / ${MAX_FILES} files uploaded`;
          return;
        }

        spectraData.forEach((s, i) => {
          const li = document.createElement("li");
          const span = document.createElement("span");
          span.textContent = `${i + 1}. ${s.name}`;
          
          const deleteBtn = document.createElement("button");
          deleteBtn.textContent = "Delete";
          deleteBtn.className = "delete-file-btn";
          deleteBtn.onclick = () => deleteFile(i);
          
          li.appendChild(span);
          li.appendChild(deleteBtn);
          fileList.appendChild(li);
        });

        fileCount.textContent = `${spectraData.length} / ${MAX_FILES} files uploaded`;
      }

      runBtn.addEventListener("click", () => {
        if (spectraData.length === 0) {
          alert("Please upload sample spectra!");
          return;
        }

        chartInstances.forEach(chart => chart.destroy());
        chartInstances = [];
        chartsContainer.innerHTML = "";

        createOverlayChart(spectraData);

        resultsContainer.classList.add("visible");
      });

      function createOverlayChart(spectra) {
        const colors = [
          "#2b7de9", "#ef4444", "#10b981", "#f59e0b", 
          "#8b5cf6", "#ec4899"
        ];

        const chartDiv = document.createElement("div");
        chartDiv.className = "chart-card";
        chartDiv.style.gridColumn = "1 / -1";
        
        chartDiv.innerHTML = `
          <h3>Spectral Overlay (${spectra.length} samples)</h3>
          <canvas id="overlayChart"></canvas>
        `;
        chartsContainer.appendChild(chartDiv);

        const canvas = document.getElementById("overlayChart");
        const ctx = canvas.getContext("2d");

        const datasets = spectra.map((spec, idx) => ({
          label: spec.name,
          data: spec.plot,
          borderColor: colors[idx % colors.length],
          borderWidth: 2,
          fill: false,
          tension: 0.1,
          pointRadius: 0,
        }));

        const chart = new Chart(ctx, {
          type: "line",
          data: { datasets },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { 
                position: "top",
                labels: { 
                  font: { size: 11 },
                  color: '#374151'
                }
              },
            },
            scales: {
              x: {
                type: "linear",
                title: { 
                  display: true, 
                  text: "Œª nm", 
                  font: { size: 12 },
                  color: '#374151'
                },
                ticks: { color: '#6b7280' },
                grid: { color: '#e5e7eb' }
              },
              y: {
                title: { 
                  display: true, 
                  text: "ABS", 
                  font: { size: 12 },
                  color: '#374151'
                },
                ticks: { color: '#6b7280' },
                grid: { color: '#e5e7eb' }
              },
            },
          },
        });

        canvas.style.height = '400px';
        chartInstances.push(chart);
      }

      clearBtn.addEventListener("click", () => {
        spectraData = [];
        updateFileDisplay();
        chartInstances.forEach(chart => chart.destroy());
        chartInstances = [];
        chartsContainer.innerHTML = "";
        resultsContainer.classList.remove("visible");
      });

      downloadBtn.addEventListener("click", () => {
        if (chartInstances.length === 0) {
          alert("Please run analysis first!");
          return;
        }
        
        const link = document.createElement('a');
        link.download = 'Spectral_Overlay.png';
        link.href = chartInstances[0].toBase64Image();
        link.click();
      });
    </script>
  </body>
</html>