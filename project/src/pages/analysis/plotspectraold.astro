---
// plotspectra.astro
// Client-side FilterService integration for spectral analysis
import DataSets from "@/logic/core/models/datasets.model.ts";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spectral Overlay Visualizer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
      /* ---------- identical styles retained ---------- */
      *{margin:0;padding:0;box-sizing:border-box;}
      body{min-height:100vh;background-color:#e8eef5;padding:1rem;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif;overflow-x:hidden;}
      .container{background:white;border:2px solid #d1d5db;border-radius:1rem;box-shadow:0 4px 6px rgba(0,0,0,0.1);max-width:1400px;width:calc(100% - 2rem);margin:0 auto 2rem auto;padding:1.5rem;position:relative;overflow:hidden;box-sizing:border-box;}
      .download-btn{position:absolute;top:2rem;right:2rem;border:2px solid #d1d5db;border-radius:.5rem;padding:.5rem 1rem;background:white;display:flex;align-items:center;gap:.5rem;font-weight:600;cursor:pointer;transition:all .2s;color:#374151;}
      .download-btn:hover{background:#f9fafb;}
      .download-btn svg{width:1.25rem;height:1.25rem;}
      h1{font-size:1.875rem;font-weight:bold;text-align:center;margin-bottom:2rem;color:#1f2937;}
      .stage-section{margin-bottom:1.5rem;padding:1.5rem;background:white;border:2px solid #d1d5db;border-radius:.75rem;}
      .stage-title{font-size:1.25rem;font-weight:600;margin-bottom:1rem;color:#1f2937;}
      .upload-area{display:flex;flex-direction:column;align-items:center;gap:1rem;}
      .upload-btn{background:#2b7de9;color:white;padding:.75rem 1.5rem;border-radius:.5rem;font-weight:600;box-shadow:0 2px 4px rgba(0,0,0,0.1);cursor:pointer;transition:all .2s;border:none;display:inline-block;}
      .upload-btn:hover{background:#1a6dd6;}
      .file-list{list-style:none;background:#f9fafb;border:2px solid #e5e7eb;border-radius:.5rem;padding:.75rem;width:20rem;min-height:60px;max-height:100px;overflow-y:auto;font-size:.875rem;color:#374151;}
      .file-list li{padding:.25rem 0;display:flex;justify-content:space-between;align-items:center;}
      .file-list .empty{text-align:center;font-style:italic;color:#9ca3af;display:block;}
      .delete-file-btn{background:#ef4444;color:white;border:none;border-radius:.25rem;padding:.125rem .5rem;font-size:.75rem;cursor:pointer;transition:all .2s;}
      .delete-file-btn:hover{background:#dc2626;}
      .file-count{font-size:.875rem;font-weight:600;color:#6b7280;}
      .action-buttons{display:flex;justify-content:center;gap:1rem;margin-bottom:1.5rem;}
      .btn-run{background:#2b7de9;color:white;padding:.75rem 2rem;border-radius:.5rem;box-shadow:0 2px 4px rgba(0,0,0,0.1);font-weight:600;font-size:1rem;border:none;cursor:pointer;transition:all .2s;}
      .btn-run:hover:not(:disabled){background:#1a6dd6;}
      .btn-run:disabled{background:#9ca3af;cursor:not-allowed;}
      .btn-clear{background:#6b7280;color:white;padding:.75rem 2rem;border-radius:.5rem;box-shadow:0 2px 4px rgba(0,0,0,0.1);font-weight:600;font-size:1rem;border:none;cursor:pointer;transition:all .2s;}
      .btn-clear:hover{background:#4b5563;}
      .results-container{display:none;width:100%;max-width:100%;box-sizing:border-box;padding-bottom:2rem;}
      .results-container.visible{display:block;}
      .results-title{font-size:1.5rem;font-weight:bold;margin-bottom:1rem;color:#1f2937;}
      .analysis-info{background:#f0f9ff;border:2px solid #bfdbfe;border-radius:.75rem;padding:1rem 1.5rem;margin-bottom:1.5rem;font-size:.875rem;}
      .analysis-info h3{font-size:1rem;font-weight:600;margin-bottom:.75rem;color:#1e40af;}
      .analysis-info p{margin:.5rem 0;color:#1e3a8a;display:flex;justify-content:space-between;align-items:center;}
      .analysis-info strong{color:#1e40af;}
      .analysis-info .value{font-weight:600;color:#2563eb;}
      .candidates-list{background:#fef3c7;border:2px solid #fcd34d;border-radius:.75rem;padding:1rem 1.5rem;margin-bottom:1.5rem;}
      .candidates-list h3{font-size:1rem;font-weight:600;margin-bottom:.75rem;color:#92400e;}
      .candidate-confidence{background:#10b981;color:white;padding:.25rem .75rem;border-radius:.25rem;font-size:.875rem;font-weight:600;text-align:center;}
      .confidence-high{background:#10b981;}
      .confidence-medium{background:#f59e0b;}
      .confidence-low{background:#ef4444;}
      .spectrum-match-grid{display:grid;grid-template-columns:1fr 1fr;gap:1rem;margin-top:1rem;}
      @media(max-width:768px){.spectrum-match-grid{grid-template-columns:1fr;}}
      .charts-grid{display:grid;grid-template-columns:1fr;gap:1rem;width:100%;max-width:100%;box-sizing:border-box;}
      @media(min-width:1024px){.charts-grid{grid-template-columns:repeat(2,1fr);}}
      .chart-card{background:white;border:2px solid #d1d5db;border-radius:.75rem;padding:1rem;box-shadow:0 2px 4px rgba(0,0,0,0.05);width:100%;overflow:hidden;}
      .chart-card.full-width{grid-column:1/-1;height:500px;min-height:500px;}
      .chart-card.full-width .chart-wrapper{height:440px;position:relative;width:100%;}
      input[type="file"]{display:none;}
      .loading-spinner{display:inline-block;width:1rem;height:1rem;border:2px solid #fff;border-top:2px solid transparent;border-radius:50%;animation:spin 1s linear infinite;margin-right:.5rem;}
      @keyframes spin{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}
    </style>
  </head>

  <body>
    <div class="container">
      <button id="downloadBtn" class="download-btn">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
          stroke-width="2" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round"
            d="M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4" />
        </svg>
        <span>Download</span>
      </button>

      <h1>Spectral Overlay Visualizer</h1>

      <div class="stage-section">
        <h2 class="stage-title">Upload Sample Spectra</h2>
        <div class="upload-area">
          <label for="fileInput" class="upload-btn">üìÅ Upload Sample Spectra (Max 6 files)</label>
          <input id="fileInput" type="file" accept=".xlsx,.xls" multiple />
          <ul id="fileList" class="file-list"><li class="empty">No files uploaded</li></ul>
          <div id="fileCount" class="file-count">0 / 6 files uploaded</div>
        </div>
      </div>

      <div class="action-buttons">
        <button id="runBtn" class="btn-run">‚ñ∂Ô∏è Run Analysis</button>
        <button id="clearBtn" class="btn-clear">üóëÔ∏è Clear All</button>
      </div>

      <div id="resultsContainer" class="results-container">
        <h2 class="results-title">Analysis Results</h2>
        <div id="analysisInfo" class="analysis-info" style="display:none;"></div>
        <div id="candidatesList" class="candidates-list" style="display:none;"></div>
        <div id="chartsContainer" class="charts-grid"></div>
      </div>
    </div>

    <script>
  // ‚úÖ Dynamically import FilterService client-side
  let FilterService = null;

  (async () => {
    try {
      const module = await import("/src/logic/filter_service.ts");
      FilterService = module.default;
      console.log("‚úÖ FilterService loaded successfully");
    } catch (err) {
      console.error("‚ùå Failed to load FilterService:", err);
    }
  })();

      const fileInput=document.getElementById("fileInput");
      const fileList=document.getElementById("fileList");
      const fileCount=document.getElementById("fileCount");
      const runBtn=document.getElementById("runBtn");
      const clearBtn=document.getElementById("clearBtn");
      const downloadBtn=document.getElementById("downloadBtn");
      const resultsContainer=document.getElementById("resultsContainer");
      const analysisInfo=document.getElementById("analysisInfo");
      const candidatesList=document.getElementById("candidatesList");
      const chartsContainer=document.getElementById("chartsContainer");
      let spectraData=[],chartInstances=[],filterServiceResults=null;
      const MAX_FILES=6;

      // -------- Upload & File Management --------
      fileInput.addEventListener("change",async(e)=>{
        const files=Array.from(e.target.files);
        if(spectraData.length+files.length>MAX_FILES){
          alert(`You can only upload up to ${MAX_FILES} files.`);
          fileInput.value="";return;
        }
        for(const file of files){
          const fileName=file.name;
          if(spectraData.some(s=>s.originalName===fileName)){alert(`"${fileName}" already uploaded.`);continue;}
          try{
            const buffer=await file.arrayBuffer();
            const workbook=XLSX.read(buffer,{type:"array"});
            const sheet=workbook.Sheets[workbook.SheetNames[0]];
            const rows=XLSX.utils.sheet_to_json(sheet,{header:1});
            const points=rows.slice(1).map(r=>({x:parseFloat(r[0]),y:parseFloat(r[1])}))
              .filter(p=>!isNaN(p.x)&&!isNaN(p.y));
            if(points.length>0)spectraData.push({name:file.name.replace(/\.[^/.]+$/,""),originalName:fileName,plot:points});
          }catch(err){alert("Error reading "+fileName+": "+err.message);}
        }
        updateFileDisplay();fileInput.value="";
      });

      function updateFileDisplay(){
        fileList.innerHTML="";
        if(spectraData.length===0){
          fileList.innerHTML='<li class="empty">No files uploaded</li>';
          fileCount.textContent=`0 / ${MAX_FILES} files uploaded`;return;
        }
        spectraData.forEach((s,i)=>{
          const li=document.createElement("li");
          const span=document.createElement("span");
          span.textContent=`${i+1}. ${s.name}`;
          const del=document.createElement("button");
          del.textContent="Delete";del.className="delete-file-btn";del.onclick=()=>{spectraData.splice(i,1);updateFileDisplay();};
          li.appendChild(span);li.appendChild(del);fileList.appendChild(li);
        });
        fileCount.textContent=`${spectraData.length} / ${MAX_FILES} files uploaded`;
      }

      // -------- FilterService Processing --------
      function prepareAlgorithmInput(spectra){
        return{unknownSpecturms:spectra.map(s=>({name:s.name,data:s.plot,wavelengths:s.plot.map(p=>p.x),absorbances:s.plot.map(p=>p.y)})),
          samples:[],version:1,sampleCount:spectra.length,metadata:{timestamp:new Date().toISOString(),fileNames:spectra.map(s=>s.originalName)}};
      }

      async function runFilterServiceAnalysis(inputParams) {
        try {
          console.log('üî¨ Starting FilterService analysis (client-side)...');

          // ‚úÖ Ensure FilterService is loaded (for client-side dynamic import)
          if (!FilterService) {
            console.warn('FilterService not yet loaded, importing dynamically...');
            const module = await import("@/logic/filter_service.ts");
            FilterService = module.default;
          }

          // --- Stage 1: Database filtering ---
          console.log('üìä Stage 1: Running database filtering algorithm...');
          const stage1Result = await FilterService.run_stage1(inputParams);
          console.log('‚úÖ Stage 1 complete:', stage1Result);

          // --- Stage 2: Spectral overlay ---
          console.log('üî¨ Stage 2: Running spectral overlay algorithm...');
          const stage2Result = await FilterService.run_stage2(inputParams, stage1Result.result);
          console.log('‚úÖ Stage 2 complete:', stage2Result);

          return {
            stage1: stage1Result,
            stage2: stage2Result
          };
        } catch (error) {
          console.error('‚ùå FilterService error:', error);
          throw error;
        }
      }


      function displayAnalysisInfo(results){
        let html="<h3>üî¨ FilterService Analysis Summary</h3>";
        if(results.stage1?.result){
          const c=results.stage1.result.candidates?.length||results.stage1.result.ids?.length||0;
          html+=`<p><strong>Stage 1:</strong> <span class='value'>${c} candidate(s)</span></p>`;
        }
        if(results.stage2?.result?.specturms){
          html+=`<p><strong>Stage 2:</strong> <span class='value'>${results.stage2.result.specturms.length} match(es)</span></p>`;
        }
        html+=`<p style='font-size:.75rem;color:#6b7280'><strong>Completed:</strong> ${new Date().toLocaleString()}</p>`;
        analysisInfo.innerHTML=html;analysisInfo.style.display='block';
      }

      function displayCandidates(results){
        if(!results.stage2?.result?.specturms){candidatesList.style.display='none';return;}
        const sorted=[...results.stage2.result.specturms].sort((a,b)=>(b.confidence||0)-(a.confidence||0));
        let html="<h3>üìã Identified Candidate Matches</h3><div class='spectrum-match-grid'>";
        sorted.forEach(s=>{
          const conf=s.confidence??0,name=s.name||s.compound?.name||"Unknown";
          let cls="confidence-low";if(conf>=0.7)cls="confidence-high";else if(conf>=0.4)cls="confidence-medium";
          html+=`<div class='candidate-confidence ${cls}'>${name}: ${(conf*100).toFixed(0)}%</div>`;
        });
        html+="</div>";
        candidatesList.innerHTML=html;candidatesList.style.display='block';
        createIndividualMatchCharts(sorted);
      }

      function createIndividualMatchCharts(matches){
        matches.slice(0,4).forEach((m,i)=>{if(m.plot?.length>0)createComparisonChart(m,i);});
      }

      function createComparisonChart(match,index){
        const colors=['#2b7de9','#ef4444','#10b981','#f59e0b'];
        const matchColor=colors[index%colors.length];
        const div=document.createElement("div");
        div.className="chart-card";
        const name=match.name||match.compound?.name||'Unknown';
        const conf=match.confidence?(match.confidence*100).toFixed(0):'N/A';
        div.innerHTML=`<h3>${name}: ${conf}%</h3><div style='height:240px'><canvas id='matchChart_${index}'></canvas></div>`;
        chartsContainer.appendChild(div);
        setTimeout(()=>{
          const ctx=document.getElementById(`matchChart_${index}`).getContext("2d");
          const datasets=[];
          if(spectraData[0]){
            datasets.push({label:'Unknown Sample',data:spectraData[0].plot,borderColor:'#6b7280',backgroundColor:'#6b728020',borderWidth:2,fill:false,tension:0.2,pointRadius:0,borderDash:[5,5]});
          }
          if(match.plot)datasets.push({label:name,data:match.plot,borderColor:matchColor,backgroundColor:matchColor+'20',borderWidth:2.5,fill:false,tension:0.2,pointRadius:0});
          chartInstances.push(new Chart(ctx,{type:"line",data:{datasets},options:{responsive:true,interaction:{mode:'index',intersect:false},plugins:{legend:{labels:{font:{size:10},color:'#374151'}},tooltip:{callbacks:{label:c=>`${c.dataset.label}: ${c.parsed.y.toFixed(4)} ABS`,title:c=>`Wavelength: ${c[0].parsed.x.toFixed(2)} nm`}}},scales:{x:{type:'linear',title:{display:true,text:'Wavelength (Œª nm)',font:{size:12}},grid:{color:'#e5e7eb'}},y:{title:{display:true,text:'Absorbance (ABS)',font:{size:12}},beginAtZero:true,grid:{color:'#e5e7eb'}}}}}));
        },100);
      }

      async function runSpectralOverlayAnalysis(inputParams){
        const normalized=inputParams.unknownSpecturms.map(s=>{const max=Math.max(...s.absorbances);return{name:s.name,wavelengths:s.wavelengths,absorbances:s.absorbances,maxAbsorbance:max};});
        createOverlayChart(normalized);
      }

      function createOverlayChart(spectra){
        const colors=["#2b7de9","#ef4444","#10b981","#f59e0b","#8b5cf6","#ec4899"];
        const div=document.createElement("div");
        div.className="chart-card full-width";
        div.innerHTML=`<h3>Spectral Overlay (${spectra.length} samples)</h3><div class='chart-wrapper'><canvas id='overlayChart'></canvas></div>`;
        chartsContainer.appendChild(div);
        setTimeout(()=>{
          const ctx=document.getElementById("overlayChart").getContext("2d");
          const datasets=spectra.map((s,i)=>({label:`${s.name} (max: ${s.maxAbsorbance.toFixed(3)})`,data:s.wavelengths.map((wl,j)=>({x:wl,y:s.absorbances[j]})),borderColor:colors[i%colors.length],backgroundColor:colors[i%colors.length]+'20',borderWidth:2.5,fill:false,tension:0.2,pointRadius:0}));
          chartInstances.push(new Chart(ctx,{type:"line",data:{datasets},options:{responsive:true,interaction:{mode:'index',intersect:false},plugins:{legend:{labels:{font:{size:11},color:'#374151',usePointStyle:true}},tooltip:{callbacks:{label:c=>`${c.dataset.label}: ${c.parsed.y.toFixed(4)} ABS`,title:c=>`Wavelength: ${c[0].parsed.x.toFixed(2)} nm`}}},scales:{x:{type:'linear',title:{display:true,text:'Wavelength (Œª nm)',font:{size:13,weight:'bold'},color:'#374151'},grid:{color:'#e5e7eb'}},y:{title:{display:true,text:'Absorbance (ABS)',font:{size:13,weight:'bold'},color:'#374151'},beginAtZero:true,grid:{color:'#e5e7eb'}}}}}));
        },100);
      }

      // -------- Main Analysis Execution --------
      runBtn.addEventListener("click",async()=>{
        if(spectraData.length===0){alert("Please upload sample spectra!");return;}
        runBtn.disabled=true;runBtn.innerHTML='<span class="loading-spinner"></span>Running Analysis...';
        try{
          chartInstances.forEach(c=>c.destroy());chartInstances=[];chartsContainer.innerHTML="";
          analysisInfo.style.display='none';candidatesList.style.display='none';
          const input=prepareAlgorithmInput(spectraData);
          filterServiceResults=await runFilterServiceAnalysis(input);
          displayAnalysisInfo(filterServiceResults);
          displayCandidates(filterServiceResults);
          await runSpectralOverlayAnalysis(input);
          resultsContainer.classList.add("visible");
        }catch(err){console.error(err);alert("Analysis error: "+err.message);}
        finally{runBtn.disabled=false;runBtn.innerHTML='‚ñ∂Ô∏è Run Analysis';}
      });

      // -------- Clear & Download --------
      clearBtn.addEventListener("click",()=>{
        spectraData=[];filterServiceResults=null;
        updateFileDisplay();chartInstances.forEach(c=>c.destroy());
        chartInstances=[];chartsContainer.innerHTML="";
        analysisInfo.style.display='none';candidatesList.style.display='none';
        resultsContainer.classList.remove("visible");
      });

      downloadBtn.addEventListener("click",()=>{
        if(chartInstances.length===0){alert("Run analysis first!");return;}
        const link=document.createElement("a");
        link.download="Spectral_Overlay_Analysis.png";
        link.href=chartInstances[0].toBase64Image();
        link.click();
      });
    </script>
  </body>
</html>
