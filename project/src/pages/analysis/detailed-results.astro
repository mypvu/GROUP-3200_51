---
import Header from '@/components/Header.astro';
import Layout from "@/layouts/Layout.astro";

// ✅ Step 1: Dynamically load algorithm output (auto-updated file or API)
let sampleData;

// OPTION 1: If your algorithm writes to a JSON file in /src/data
// sampleData = (await import('../data/sample-output.json')).default;

// OPTION 2: If your algorithm exposes results through an API
// Uncomment below to fetch from /api/results
try {
  const response = await fetch('http://localhost:4321/api/results'); // or your server endpoint
  sampleData = await response.json();
} catch (e) {
  console.error('Failed to load algorithm output:', e);
  sampleData = {}; // fallback empty object
}

// Safety: Ensure we’re rendering something iterable
const compounds = sampleData ? Object.values(sampleData) : [];
---

<head>
    <meta charset="UTF-8" />
    <title>Detailed Results</title>
</head>

<script>
    function colorByHue(cell, hueValue) {
        if (!hueValue || isNaN(hueValue)) return;
        const hue = parseFloat(hueValue);
        const color = `hsl(${hue}, 70%, 45%)`;
        cell.style.backgroundColor = color;
        cell.style.color = "white";
        cell.style.fontWeight = "600";
    }

    function applyHueColors() {
        document.querySelectorAll("[data-hue]").forEach((cell) => {
            colorByHue(cell, cell.dataset.hue);
        });
    }

    function goBack() {
        window.history.back();
    }

    window.addEventListener("DOMContentLoaded", applyHueColors);
</script>

<Layout>
  <body class="bg-gray-100 min-h-screen flex flex-col items-center">
    <Header title="Detailed Results" />

    <main class="w-full max-w-6xl p-10">
      <!-- Header and Actions -->
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-4xl font-bold text-gray-900">Detailed Results:</h1>
        <button
          onclick="window.location.href='/api/download-results'"
          class="flex items-center gap-2 bg-gray-200 hover:bg-gray-300 text-gray-900 px-5 py-2 rounded-2xl shadow transition"
        >
          <span>Download</span>
          <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M7 10l5 5m0 0l5-5m-5 5V4" />
          </svg>
        </button>
      </div>

      <!-- Table -->
      <div class="overflow-x-auto bg-white rounded-2xl shadow-lg">
        <table class="min-w-full border-collapse text-center">
          <thead class="bg-gray-200 text-gray-700 text-sm uppercase font-semibold">
            <tr>
              <th class="p-3 border">Name and Code</th>
              <th class="p-3 border">Rf 1</th>
              <th class="p-3 border">H° DEV 254 nm</th>
              <th class="p-3 border">H° DEV 366 nm</th>
              <th class="p-3 border">H° VSA 366 nm</th>
              <th class="p-3 border">H° T VSA</th>
              <th class="p-3 border">FI DEV λ</th>
              <th class="p-3 border">FI DEV λ m</th>
              <th class="p-3 border">UV DEV λ₁</th>
              <th class="p-3 border">UV DEV λ₂</th>
              <th class="p-3 border">UV DEV λ₃</th>
              <th class="p-3 border">FI VS λ</th>
              <th class="p-3 border">UV VS λ</th>
            </tr>
          </thead>

          <tbody class="text-gray-800">
            {compounds.length === 0 ? (
              <tr>
                <td colspan="13" class="p-6 text-gray-500">
                  No data available. Run the algorithm to generate results.
                </td>
              </tr>
            ) : (
              compounds.map((compound) => (
                <tr class="odd:bg-gray-50">
                  <td class="p-3 border font-semibold">{compound.id}</td>
                  <td class="p-3 border">{compound.RF}</td>
                  <td class="p-3 border" data-hue={compound.DEV_254nm}>{compound.DEV_254nm}</td>
                  <td class="p-3 border" data-hue={compound.DEV_366nm}>{compound.DEV_366nm}</td>
                  <td class="p-3 border" data-hue={compound.VSNP_366nm}>{compound.VSNP_366nm}</td>
                  <td class="p-3 border" data-hue={compound.T ?? ""}>{compound.T ?? ""}</td>

                  <!-- FL Peaks -->
                  <td class="p-3 border">
                    {compound.FL_Peaks?.[0] ?? ""}
                  </td>
                  <td class="p-3 border">
                    {compound.FL_Peaks?.[1] ?? ""}
                  </td>

                  <!-- UV Peaks -->
                  {(compound.UV_Peaks ?? []).slice(0, 3).map((peak) => (
                    <td class="p-3 border">{peak}</td>
                  ))}

                  <!-- FI VS and UV VS λ -->
                  <td class="p-3 border">{compound.FL_Peaks?.[0] ?? ""}</td>
                  <td class="p-3 border">{compound.FL_Peaks?.[1] ?? ""}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      <div class="flex justify-center mt-10">
        <button
          onclick="goBack()"
          class="border border-black text-black text-lg font-semibold px-8 py-3 rounded-full hover:bg-gray-100 transition"
        >
          Go Back
        </button>
      </div>
    </main>
  </body>
</Layout>