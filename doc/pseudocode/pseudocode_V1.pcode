DATA STRUCTURES
---------------
Compound:
    id
    db_label              // "1A", "1B", "2A", "2B"
    RF
    DEV_254nm             // "254nm DEV"  (Color 1)
    DEV_366nm             // "366nm DEV"  (Color 2)
    VSNP_366nm            // "366nm VS/NP" (Color 3)
    T                     // float or NULL; only present for B databases
    UV_Peaks[]            // list<float>
    FL_Peaks[]            // list<float>

InputParams:
    RF_value, RF_bound_or_null
    DEV254_value, DEV254_bound_or_null
    DEV366_value, DEV366_bound_or_null
    VSNP366_value, VSNP366_bound_or_null
    T_value, T_bound_or_null          
    UV_count (1..3)
    UV1_value, UV1_bound_or_null
    UV2_value, UV2_bound_or_null
    UV3_value, UV3_bound_or_null
    FL_count (1..3)
    FL1_value, FL1_bound_or_null
    FL2_value, FL2_bound_or_null
    FL3_value, FL3_bound_or_null

Defaults:
    DEFAULT_RF_BOUND      = 0.05
    DEFAULT_COLOR_T_BOUND = 60.0
    DEFAULT_UV_FL_BOUND   = 0.02

AuditTrail:
    eliminations_by_step: map<string /*step+db*/, list<EliminationRecord>>
    survivors_by_step:   map<string /*step+db*/, list<Compound.id>>
EliminationRecord:
    step_name   // e.g., "RF@1A", "254nm DEV@2B", ...
    db_label
    compound_id
    reason      // observed vs required range text, don't know what is this, please skip it at this stage
----------------


HELPERS
-------
function bound_or_default(user_bound, default_bound) -> float
function range_additive(val, bound) -> (min_v, max_v)         // RF, DEVs, VSNP, T
function range_multiplicative(val, bound) -> (min_v, max_v)   // UV/FL
function in_range(x, lo, hi) -> bool                          // strict bounds per spec
function exists_peak_in_range(peaks_list, lo, hi) -> bool

function record_elim(trail, step, db, compound, reason): // please skip this at this stage
    key = step + "@" + db
    trail.eliminations_by_step[key].append(
        EliminationRecord(step, db, compound.id, reason)
    )

function record_survivors(trail, step, db, compounds): //this need to be implemented
    key = step + "@" + db
    trail.survivors_by_step[key] = [c.id for c in compounds]


LOADING
-------
function load_db(db_label) -> list<Compound>:
    // Load exactly one of {1A,1B,2A,2B} and map columns to fields.
    // For A databases, T = NULL.
    // Return list of Compound for that db_label.


CORE FILTER FOR ONE DB
----------------------
function filter_one_database(db_label, compounds, P):
    // Step names (with @db suffix) are used in the audit trail keys.
    // Compute ranges upfront
    rf_b      = bound_or_default(P.RF_bound_or_null,       DEFAULT_RF_BOUND)
    dev254_b  = bound_or_default(P.DEV254_bound_or_null,   DEFAULT_COLOR_T_BOUND)
    dev366_b  = bound_or_default(P.DEV366_bound_or_null,   DEFAULT_COLOR_T_BOUND)
    vsnp_b    = bound_or_default(P.VSNP366_bound_or_null,  DEFAULT_COLOR_T_BOUND)
    t_b       = bound_or_default(P.T_bound_or_null,        DEFAULT_COLOR_T_BOUND)
    (rf_min, rf_max)         = range_additive(P.RF_value, rf_b)
    (d254_min, d254_max)     = range_additive(P.DEV254_value, dev254_b)
    (d366_min, d366_max)     = range_additive(P.DEV366_value, dev366_b)
    (vsnp_min, vsnp_max)     = range_additive(P.VSNP366_value, vsnp_b)
    (t_min, t_max)           = range_additive(P.T_value, t_b)

    candidates = compounds

    // 1) RF
    step = "RF"
    next_candidates = []
    for c in candidates:
        if c.RF is NULL:
            record_elim(trail, step, db_label, c, "Missing RF")
        else if in_range(c.RF, rf_min, rf_max):
            next_candidates.append(c)
        else:
            record_elim(trail, step, db_label, c, "RF=" + c.RF + " not in ("+rf_min+","+rf_max+")")
    candidates = next_candidates
    record_survivors(trail, step, db_label, candidates)

    // 2) 254nm DEV (Color 1)
    step = "254nm DEV"
    next_candidates = []
    for c in candidates:
        if c.DEV_254nm is NULL:
            record_elim(trail, step, db_label, c, "Missing 254nm DEV")
        else if in_range(c.DEV_254nm, d254_min, d254_max):
            next_candidates.append(c)
        else:
            record_elim(trail, step, db_label, c, "254nm DEV="+c.DEV_254nm+" not in ("+d254_min+","+d254_max+")")
    candidates = next_candidates
    record_survivors(trail, step, db_label, candidates)

    // 3) 366nm DEV (Color 2)
    step = "366nm DEV"
    next_candidates = []
    for c in candidates:
        if c.DEV_366nm is NULL:
            record_elim(trail, step, db_label, c, "Missing 366nm DEV")
        else if in_range(c.DEV_366nm, d366_min, d366_max):
            next_candidates.append(c)
        else:
            record_elim(trail, step, db_label, c, "366nm DEV="+c.DEV_366nm+" not in ("+d366_min+","+d366_max+")")
    candidates = next_candidates
    record_survivors(trail, step, db_label, candidates)

    // 4) 366nm VS/NP (Color 3)
    step = "366nm VS/NP"
    next_candidates = []
    for c in candidates:
        if c.VSNP_366nm is NULL:
            record_elim(trail, step, db_label, c, "Missing 366nm VS/NP")
        else if in_range(c.VSNP_366nm, vsnp_min, vsnp_max):
            next_candidates.append(c)
        else:
            record_elim(trail, step, db_label, c, "366nm VS/NP="+c.VSNP_366nm+" not in ("+vsnp_min+","+vsnp_max+")")
    candidates = next_candidates
    record_survivors(trail, step, db_label, candidates)

    // 5) T (APPLY ONLY IF db is a B database)
    if db_label endswith "B":
        step = "T"
        next_candidates = []
        for c in candidates:
            if c.T is NULL:
                record_elim(trail, step, db_label, c, "Missing T in B db")
            else if in_range(c.T, t_min, t_max):
                next_candidates.append(c)
            else:
                record_elim(trail, step, db_label, c, "T="+c.T+" not in ("+t_min+","+t_max+")")
        candidates = next_candidates
        record_survivors(trail, step, db_label, candidates)
    else:
        // A databases: skip T filtering
        record_survivors(trail, "T (skipped)", db_label, candidates)

    // 6) UV-Vis peaks
    for i in 1..P.UV_count:
        uv_val   = (i==1? P.UV1_value : i==2? P.UV2_value : P.UV3_value)
        uv_bound = bound_or_default( (i==1? P.UV1_bound_or_null : i==2? P.UV2_bound_or_null : P.UV3_bound_or_null),
                                     DEFAULT_UV_FL_BOUND )
        (uv_min, uv_max) = range_multiplicative(uv_val, uv_bound)
        step = "UV-Vis #"+i
        next_candidates = []
        for c in candidates:
            if c.UV_Peaks is NULL or c.UV_Peaks.length == 0:
                record_elim(trail, step, db_label, c, "No UV-Vis peaks")
            else if exists_peak_in_range(c.UV_Peaks, uv_min, uv_max):
                next_candidates.append(c)
            else:
                record_elim(trail, step, db_label, c, "No UV-Vis peak in ["+uv_min+","+uv_max+"]")
        candidates = next_candidates
        record_survivors(trail, step, db_label, candidates)

    // 7) FL peaks
    for i in 1..P.FL_count:
        fl_val   = (i==1? P.FL1_value : i==2? P.FL2_value : P.FL3_value)
        fl_bound = bound_or_default( (i==1? P.FL1_bound_or_null : i==2? P.FL2_bound_or_null : P.FL3_bound_or_null),
                                     DEFAULT_UV_FL_BOUND )
        (fl_min, fl_max) = range_multiplicative(fl_val, fl_bound)
        step = "FL #"+i
        next_candidates = []
        for c in candidates:
            if c.FL_Peaks is NULL or c.FL_Peaks.length == 0:
                record_elim(trail, step, db_label, c, "No FL peaks")
            else if exists_peak_in_range(c.FL_Peaks, fl_min, fl_max):
                next_candidates.append(c)
            else:
                record_elim(trail, step, db_label, c, "No FL peak in ["+fl_min+","+fl_max+"]")
        candidates = next_candidates
        record_survivors(trail, step, db_label, candidates)

    return candidates  // final per-DB survivors (ids stored in trail already)
